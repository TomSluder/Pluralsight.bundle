from client import Client
from urlInfo import UrlInfo

g_client = Client()

def MetadataObjectForURL(url):
    Log.Debug('MetadataObjectForURL: %s', url)

    info = getInfoFromUrl(url)
    g_client.login()

    Log('Getting metadata for course \'%s\'', info.course)

    course = g_client.get_course(info.course)
    matchingModules = filter(lambda x: x.name == info.module, course.modules)
    module = matchingModules[0] if matchingModules else None

    if not module:
        raise Ex.MediaNotAvailable

    Log.Debug('Looking for clip %d', info.clipIndex)
    matchingClips = filter(lambda x: x.index == info.clipIndex, module.clips)
    clip = matchingClips[0] if matchingClips else None

    if not clip:
        raise Ex.MediaNotAvailable

    return VideoClipObject(
        url = url,
        title = clip.title,
        duration = clip.duration,
        thumb = course.image
    )

def getInfoFromUrl(url):
    return UrlInfo(url)

def MediaObjectsForURL(url):
    Log('MediaObjectsForURL: %s', url)

    info = getInfoFromUrl(url)

    resolution = '720' if info.isWidescreen else '768'
    aspectRatio = '1.78' if info.isWidescreen else '1.33'

    return [
        MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            container = Container.MP4,
            video_resolution = resolution,
            aspect_ratio = aspectRatio,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [
                PartObject(key = Callback(PlayVideo, url = url))
            ]
        )
    ]

@indirect
def PlayVideo(url):
    Log.Debug('Playing video at \'%s\'', url)

    info = getInfoFromUrl(url)
    g_client.login()
    videoUrl = g_client.get_video(info.course, info.module, info.author, info.clipIndex, info.isWidescreen)
    Log.Debug('Video URL: %s', videoUrl)

    return IndirectResponse(VideoClipObject,
        key = videoUrl
    )

